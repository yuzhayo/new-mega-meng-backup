Document 4: Current Codebase Snapshot üìÅ
LauncherScreen.tsx (Full File)
/* ============================================================
   IMPORT SECTION
   ============================================================ */
import React, { createContext, useContext, useEffect, useMemo, useRef, useState } from "react";
import { useTripleTapToggle, GestureLayer } from "./LauncherHooks";
import LauncherBtn from "./LauncherBtn";
import LauncherScreenBG from "./LauncherScreenBG";

/* ============================================================
   TYPES SECTION
   ============================================================ */
type Props = {};
export type OriginState = {
  width: number;
  height: number;
  centerX: number;
  centerY: number;
  scale: number; // 0.5 * min(width, height) untuk normalisasi [-1..1]
};
export type Norm = { x: number; y: number };

/* ============================================================
   STATE SECTION
   ============================================================ */
export const OVERLAY_ID = "overlay-root";
export const ORIGIN_DOT = 2;

const OriginContext = createContext<OriginState | null>(null);

export function useOrigin(): OriginState {
  const v = useContext(OriginContext);
  if (!v) throw new Error("useOrigin must be used within <OriginProvider>");
  return v;
}
function OriginProvider({ value, children }: { value: OriginState; children: React.ReactNode }) {
  return <OriginContext.Provider value={value}>{children}</OriginContext.Provider>;
}

function useSize(el: React.RefObject<HTMLDivElement | null>) {
  const [size, setSize] = useState({ width: 0, height: 0 });
  useEffect(() => {
    const node = el.current;
    if (!node) return;
    const ro = new ResizeObserver(([entry]) => {
      const cr = entry.contentRect;
      setSize({ width: cr.width, height: cr.height });
    });
    ro.observe(node);
    return () => ro.disconnect();
  }, [el]);
  return size;
}

/* ============================================================
   LOGIC SECTION
   ============================================================ */
function useOriginState(size: Readonly<{ width: number; height: number }>): OriginState {
  return useMemo(() => {
    const w = size.width;
    const h = size.height;
    if (w <= 0 || h <= 0) {
      return { width: w, height: h, centerX: 0, centerY: 0, scale: 1 };
    }
    const centerX = w / 2;
    const centerY = h / 2;
    const scale = Math.max(1, 0.5 * Math.min(w, h));
    return { width: w, height: h, centerX, centerY, scale };
  }, [size.width, size.height]);
}

export function mapToPx(o: OriginState, n: Norm) {
  const left = o.centerX + n.x * o.scale;
  const top = o.centerY - n.y * o.scale;
  return { left, top };
}
export function pxToNorm(o: OriginState, p: { left: number; top: number }): Norm {
  const x = (p.left - o.centerX) / o.scale;
  const y = (o.centerY - p.top) / o.scale;
  return { x, y };
}

/* ============================================================
   UI SECTION
   ============================================================ */
export default function LauncherScreen(_: Props) {
  const ref = useRef<HTMLDivElement | null>(null);
  const size = useSize(ref);
  const origin = useOriginState(size);
  const { show, onPointerDown } = useTripleTapToggle();

  return (
    <div ref={ref} className="relative w-full h-screen bg-gray-900">
      <OriginProvider value={origin}>
        <LauncherScreenBG origin={origin} manifestPath="/launcher-bg.json" />
        <div
          className="absolute z-10 left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-full"
          style={{ width: ORIGIN_DOT, height: ORIGIN_DOT, backgroundColor: "#28eb49ff" }}
          aria-label="origin marker"
        />
        <div id={OVERLAY_ID} className="pointer-events-none absolute inset-0 z-50" />
        <GestureLayer onPointerDown={onPointerDown} />
        {show && <LauncherBtn />}
      </OriginProvider>
    </div>
  );
}
LauncherHooks.tsx (Full File)
/* ============================================================
   IMPORT SECTION
   ============================================================ */
import React, { useCallback, useRef, useState } from "react";

/* ============================================================
   TYPES SECTION
   ============================================================ */
export type TripleTapOptions = {
  windowMs?: number;     // time window to collect taps (ms)
  radiusPx?: number;     // max distance among taps to count as same area (px)
};
type Point = { x: number; y: number };

/* ============================================================
   LOGIC SECTION
   ============================================================ */
function dist(a: Point, b: Point) {
  const dx = a.x - b.x, dy = a.y - b.y;
  return Math.hypot(dx, dy);
}

/** Hook: triple-tap anywhere toggles a boolean flag (show/hide). */
export function useTripleTapToggle(opts: TripleTapOptions = {}) {
  const windowMs = opts.windowMs ?? 450;   /* 3 taps must occur within 450ms */
  const radiusPx = opts.radiusPx ?? 48;    /* taps must be within 48px radius */

  const [show, setShow] = useState(false);
  const taps = useRef<{ t: number; p: Point }[]>([]);

  const onPointerDown = useCallback((e: React.PointerEvent) => {
    const now = performance.now();
    const p = { x: e.clientX, y: e.clientY };

    // keep taps in the time window
    taps.current = taps.current.filter(entry => now - entry.t <= windowMs);
    taps.current.push({ t: now, p });

    // spatial consistency check
    const first = taps.current[0]?.p;
    const okRadius = first ? taps.current.every(entry => dist(entry.p, first) <= radiusPx) : true;

    if (okRadius && taps.current.length >= 3) {
      setShow(prev => !prev);       /* toggle show/hide */
      taps.current = [];            /* reset after toggle */
    }
  }, [windowMs, radiusPx]);

  return { show, onPointerDown, setShow };
}

/* ============================================================
   UI SECTION
   ============================================================ */
/** Full-screen invisible layer to capture triple-tap gestures. */
export function GestureLayer(props: { onPointerDown: (e: React.PointerEvent) => void }) {
  return (
    <div
      className="absolute inset-0 z-40 pointer-events-auto"
      onPointerDown={props.onPointerDown}
      aria-hidden="true"
    />
  );
}
LauncherBtn.tsx (Full File)
/* ============================================================
   IMPORT SECTION
   ============================================================ */
// import React from "react";

/* ============================================================
   UI SECTION
   ============================================================ */
export default function LauncherBtn() {
  return (
    <div
      className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2
                 px-4 py-4 rounded-2xl shadow text-sm select-none
                 bg-neutral-200/90 dark:bg-neutral-800/90
                 pointer-events-auto z-50"
    >
      LauncherBtn
    </div>
  );
}
package.json (Dependencies)
{
  "name": "new-mega-meng",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "dependencies": {
    "lucide-react": "^0.542.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@types/node": "^24.3.0",
    "@types/react": "^19.0.0",
    "@types/react-dom": "^19.0.0",
    "@vitejs/plugin-react": "^5.0.2",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.34.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.9.2",
    "vite": "^7.1.3",
    "vitest": "^3.2.4"
  }
}
launcher-bg.json (Current Manifest)
{
  "layers": [
    { "src": "/Asset/BG/BG1.png", "fit": "none", "scalePct": 100, "posPct": { "x": 0, "y": 0 } },
    { "src": "/Asset/BG/BG2.png", "fit": "none", "scalePct": 100, "posPct": { "x": 0, "y": 0 } },
    { "src": "/Asset/BG/BG3.png", "fit": "none", "scalePct": 100, "posPct": { "x": 0, "y": 0 } },
    { "src": "/Asset/BG/BG4.png", "fit": "none", "scalePct": 100, "posPct": { "x": 0, "y": 0 } },
    { "src": "/Asset/BG/BG5.png", "fit": "none", "scalePct": 100, "posPct": { "x": 0, "y": 0 } }
  ]
}
Asset Locations Confirmed
‚úÖ /app/frontend/public/Asset/BG/BG1.png
‚úÖ /app/frontend/public/Asset/BG/BG2.png
‚úÖ /app/frontend/public/Asset/BG/BG3.png
‚úÖ /app/frontend/public/Asset/BG/BG4.png
‚úÖ /app/frontend/public/Asset/BG/BG5.png